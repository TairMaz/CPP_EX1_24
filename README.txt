//tairmazriv@gmail.com
//id: 209188382

**גרף**
loadGraph:
מגדירה את המטריצה של הגרף להיות המטריצה המתקבלת (במידה והמטריצה לא ריבועית תזרוק שגיאה).

printGraph:
מדפיסה את כמות הצמתים וכמות הצלעות בגרף.

**אלגוריתמים**
isConnected:
משתמשת בחיפוש לרוחב (BFS) מהצומת הראשון.
מתחילה מהצומת 0 ומסמנת אותו כמבוקר.
מכניסה את כל השכנים הלא מבוקרים לתור.
ממשיכה לבקר צמתים מהתור עד שהתור מתרוקן.
בסוף, בודקת אם כל הצמתים בוקרו. אם כן, הגרף מחובר.

shortestPath:
משתמשת ב-BFS ומערך הורים לשחזור המסלול.
מתחילה מצומת ההתחלה ומסמנת את המרחק אליו כ-0.
מבצעת BFS, מעדכנת מרחקים והורים לכל צומת.
אם מגיעה לצומת היעד, משחזרת את המסלול לאחור בעזרת מערך ההורים.

checkCycle ו-isContainsCycle:
משתמשת בחיפוש לעומק (DFS) רקורסיבי.
isContainsCycle מאתחלת את החיפוש מכל צומת לא מבוקר.
checkCycle מבצעת DFS רקורסיבי, מסמנת צמתים כמבוקרים.
node: הצומת הנוכחי שבו אנו בודקים.
adj: מערך של רשימות שכנים של כל צומת בגרף.
vis: מערך של מצבי ביקור (0 לא בוקר, 1 בוקר).
parent: הצומת האב שבה הגענו לצומת הנוכחי.
path: רשימת הצמתים במסלול הנוכחי.
cycleStart: הצומת בה התחיל המעגל.
visitedNodes: קבוצת הצמתים שנבדקו במעגל.

אם מגיעה לצומת מבוקר שאינו ההורה הישיר, זיהתה מעגל.
אם נמצא מעגל, מדפיסה אותו ומחזירה true.


isBipartite:
משתמשת ב-BFS וצביעה בשני צבעים.
מתחילה מצומת לא צבוע וצובעת אותו באדום.
צובעת את כל שכניו בכחול, את שכניהם באדום וכן הלאה.
אם נתקלת בסתירה (שני שכנים באותו צבע), הגרף אינו דו-צדדי.
מחזירה תיאור של החלוקה לשתי קבוצות או "0" אם לא ניתן.


negativeCycle:
משתמשת באלגוריתם בלמן-פורד. 
מאתחלת מרחקים לאינסוף, מרחק הצומת הראשון ל-0.
מבצעת n-1 איטרציות של relaxation (עדכון מרחקים).
מבצעת איטרציה נוספת. אם יש עוד שיפור, קיים מעגל שלילי.
אם מוצאת מעגל שלילי, מדפיסה אותו ומחזירה true.